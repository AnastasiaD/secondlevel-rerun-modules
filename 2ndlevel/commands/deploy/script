#!/bin/bash
#
# NAME
#
#   deploy
#
# DESCRIPTION
#
#   Deploy site after building.
#

# Parse the command options
[ -r $RERUN_MODULES/2ndlevel/commands/deploy/options.sh ] && {
  source $RERUN_MODULES/2ndlevel/commands/deploy/options.sh
}

# Read module function library
[ -r $RERUN_MODULES/2ndlevel/lib/functions.sh ] && {
  source $RERUN_MODULES/2ndlevel/lib/functions.sh
}

# ------------------------------
# Your implementation goes here.
# ------------------------------

set -e

BRANCH=develop

# Set if not already set as envvar.
if [ -z "$ACQUIA_SUBSCRIPTION" ]; then
  ACQUIA_SUBSCRIPTION=$PROJECT
fi

# Execute site build script
rerun 2ndlevel:build \
  --buildfile $WORKSPACE/profile/build-${PROJECT}.make \
  --destination $WORKSPACE/build \
  --project ${PROJECT} \
  --install

# Create git reference repo if nonexistent.
export GIT_REFERENCE_DIR=~jenkins/jobs/deploy-dev/$PROJECT.reference.git
[ -d "$GIT_REFERENCE_DIR" ] || git clone $REPO $GIT_REFERENCE_DIR --mirror

if [ -n "$(git ls-remote $REPO $BRANCH)" ]; then
  # If branch exists remotely, clone it.
  git clone $REPO $WORKSPACE/acquia \
    --reference=$GIT_REFERENCE_DIR \
    --branch=$BRANCH
  cd $WORKSPACE/acquia
else
  # If not, clone default and create it.
  git clone ${REPO} $WORKSPACE/acquia \
    --reference=$GIT_REFERENCE_DIR
  cd $WORKSPACE/acquia
  git checkout -b ${BRANCH}
fi

git rm -r --force --quiet docroot

# rsync build/ dir into acquia repo docroot/
# (excluding files according to patterns in file, accessible to developers.)
rsync --archive --exclude-from=$WORKSPACE/profile/tmp/conf/docroot-exclude.txt $WORKSPACE/build/ $WORKSPACE/acquia/docroot/
git add --force docroot/

# Sanity check to see what was commited.
git status

# If nothing staged, `git diff --cached` exits with 0
# and so deploy script exits (no error)
if [ "$(git diff --quiet --exit-code --cached; echo $?)" -eq 0 ]; then
  echo 'DEPLOY SCRIPT: No changes staged, and so exiting gracefully...'
  exit 0
fi

# Get commit message from install profile repo and push to $BRANCH
COMMIT_MSG=`git --git-dir=$WORKSPACE/profile/.git log --oneline --max-count=1`
git commit --message="Profile repo commit $COMMIT_MSG"
git push origin ${BRANCH}

# Back up database before running remote drush commands on it.
# We request a backup with the Acquia CLI, and then use the
# task ID to poll for it to be 'done' before moving on.
# We provide output for the logs, and a cap of 10 API calls.

TASK_ID="$(drush @${ACQUIA_SUBSCRIPTION}.dev ac-database-instance-backup ${ACQUIA_SUBSCRIPTION} \
  --include=${WORKSPACE}/profile/tmp/scripts/drush \
  --config=${WORKSPACE}/profile/tmp/scripts/drush/${ACQUIA_SUBSCRIPTION}.acapi.drushrc.php \
  --alias-path=${WORKSPACE}/profile/tmp/scripts/drush 2>&1 \
  | awk '{ print $2 }')"

poll_count=0
while [[ "$(drush @${ACQUIA_SUBSCRIPTION}.dev ac-task-info $TASK_ID \
  --include=${WORKSPACE}/profile/tmp/scripts/drush \
  --config=${WORKSPACE}/profile/tmp/scripts/drush/${ACQUIA_SUBSCRIPTION}.acapi.drushrc.php \
  --alias-path=${WORKSPACE}/profile/tmp/scripts/drush 2>&1 \
  | grep -E '^ state' | awk '{ print $NF }')" != "done" ]]
do
  poll_count=`expr $poll_count + 1`
  echo "API polls: $poll_count of 10 attempted."
  if [[ "$poll_count" -gt 9 ]]; then
    echo "ERROR: Timed out while waiting for Acquia backup."
    exit 1
  fi
  sleep 15
done

drush @${ACQUIA_SUBSCRIPTION}.dev --alias-path=${WORKSPACE}/profile/tmp/scripts/drush --yes updatedb
# Force reversion since sometimes its skipped when feature incorrectly assumes no changes.
drush @${ACQUIA_SUBSCRIPTION}.dev --alias-path=${WORKSPACE}/profile/tmp/scripts/drush --yes features-revert-all --force
drush @${ACQUIA_SUBSCRIPTION}.dev --alias-path=${WORKSPACE}/profile/tmp/scripts/drush --yes cache-clear all
# List feature statuses to audit whether reversions happened correctly.
drush @${ACQUIA_SUBSCRIPTION}.dev --alias-path=${WORKSPACE}/profile/tmp/scripts/drush --yes features-list

# Done
